// Code generated by go-swagger; DO NOT EDIT.

package main

import (
	"os"

	"github.com/go-openapi/loads"
	"github.com/jessevdk/go-flags"

	"server/generated/restapi"
	"server/generated/restapi/operations"
	"server/handlers"
)


func main() {
	swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)
	if err != nil {
		panic(err)
	}

	api := operations.NewUsersAPIAPI(swaggerSpec)

	// Создаем хендлеры
	h := handlers.New()

	api.GetUsersHandler = operations.GetUsersHandlerFunc( h.GetUsers)
	api.CreateUsersHandler = operations.CreateUsersHandlerFunc( h.CreateUsers)

	server := restapi.NewServer(api)
	defer server.Shutdown()

	parser := flags.NewParser(server, flags.Default)
	parser.ShortDescription = "Users API"
	parser.LongDescription = swaggerSpec.Spec().Info.Description

	server.ConfigureFlags()
	server.Port = 8080

	for _, optsGroup := range api.CommandLineOptionsGroups {
		_, err = parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
		if err != nil {
			panic(err)
		}
	}

	_, err = parser.Parse()
	if  err != nil {
		code := 1
		if fe, ok := err.(*flags.Error); ok {
			if fe.Type == flags.ErrHelp {
				code = 0
			}
		}

		os.Exit(code)
	}

	server.ConfigureAPI()


	err = server.Serve()
	if  err != nil {
		panic(err)
	}

}
