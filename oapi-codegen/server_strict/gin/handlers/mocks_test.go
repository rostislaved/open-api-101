// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package handlers

import (
	"context"
	"server/usecases"

	mock "github.com/stretchr/testify/mock"
)

// NewMockUseCases creates a new instance of MockUseCases. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUseCases(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUseCases {
	mock := &MockUseCases{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUseCases is an autogenerated mock type for the UseCases type
type MockUseCases struct {
	mock.Mock
}

type MockUseCases_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUseCases) EXPECT() *MockUseCases_Expecter {
	return &MockUseCases_Expecter{mock: &_m.Mock}
}

// CreateUsers provides a mock function for the type MockUseCases
func (_mock *MockUseCases) CreateUsers(ctx context.Context, userRequests usecases.CreateUserRequestDTO) (int, error) {
	ret := _mock.Called(ctx, userRequests)

	if len(ret) == 0 {
		panic("no return value specified for CreateUsers")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, usecases.CreateUserRequestDTO) (int, error)); ok {
		return returnFunc(ctx, userRequests)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, usecases.CreateUserRequestDTO) int); ok {
		r0 = returnFunc(ctx, userRequests)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, usecases.CreateUserRequestDTO) error); ok {
		r1 = returnFunc(ctx, userRequests)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUseCases_CreateUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUsers'
type MockUseCases_CreateUsers_Call struct {
	*mock.Call
}

// CreateUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - userRequests usecases.CreateUserRequestDTO
func (_e *MockUseCases_Expecter) CreateUsers(ctx interface{}, userRequests interface{}) *MockUseCases_CreateUsers_Call {
	return &MockUseCases_CreateUsers_Call{Call: _e.mock.On("CreateUsers", ctx, userRequests)}
}

func (_c *MockUseCases_CreateUsers_Call) Run(run func(ctx context.Context, userRequests usecases.CreateUserRequestDTO)) *MockUseCases_CreateUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 usecases.CreateUserRequestDTO
		if args[1] != nil {
			arg1 = args[1].(usecases.CreateUserRequestDTO)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUseCases_CreateUsers_Call) Return(n int, err error) *MockUseCases_CreateUsers_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockUseCases_CreateUsers_Call) RunAndReturn(run func(ctx context.Context, userRequests usecases.CreateUserRequestDTO) (int, error)) *MockUseCases_CreateUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockUseCases
func (_mock *MockUseCases) GetUser(ctx context.Context, id int) (usecases.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 usecases.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (usecases.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) usecases.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(usecases.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUseCases_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUseCases_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockUseCases_Expecter) GetUser(ctx interface{}, id interface{}) *MockUseCases_GetUser_Call {
	return &MockUseCases_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *MockUseCases_GetUser_Call) Run(run func(ctx context.Context, id int)) *MockUseCases_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUseCases_GetUser_Call) Return(user usecases.User, err error) *MockUseCases_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUseCases_GetUser_Call) RunAndReturn(run func(ctx context.Context, id int) (usecases.User, error)) *MockUseCases_GetUser_Call {
	_c.Call.Return(run)
	return _c
}
